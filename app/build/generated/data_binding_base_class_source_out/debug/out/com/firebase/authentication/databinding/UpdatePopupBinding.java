// Generated by view binder compiler. Do not edit!
package com.firebase.authentication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.firebase.authentication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdatePopupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button editButton;

  @NonNull
  public final EditText equipmentDetailsText;

  @NonNull
  public final EditText equipmentLocationText;

  @NonNull
  public final EditText equipmentNameText;

  @NonNull
  public final EditText equipmentPriceText;

  @NonNull
  public final EditText equipmentUsageText;

  private UpdatePopupBinding(@NonNull LinearLayout rootView, @NonNull Button editButton,
      @NonNull EditText equipmentDetailsText, @NonNull EditText equipmentLocationText,
      @NonNull EditText equipmentNameText, @NonNull EditText equipmentPriceText,
      @NonNull EditText equipmentUsageText) {
    this.rootView = rootView;
    this.editButton = editButton;
    this.equipmentDetailsText = equipmentDetailsText;
    this.equipmentLocationText = equipmentLocationText;
    this.equipmentNameText = equipmentNameText;
    this.equipmentPriceText = equipmentPriceText;
    this.equipmentUsageText = equipmentUsageText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdatePopupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdatePopupBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_popup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdatePopupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.edit_button;
      Button editButton = ViewBindings.findChildViewById(rootView, id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.equipment_details_text;
      EditText equipmentDetailsText = ViewBindings.findChildViewById(rootView, id);
      if (equipmentDetailsText == null) {
        break missingId;
      }

      id = R.id.equipment_location_text;
      EditText equipmentLocationText = ViewBindings.findChildViewById(rootView, id);
      if (equipmentLocationText == null) {
        break missingId;
      }

      id = R.id.equipment_name_text;
      EditText equipmentNameText = ViewBindings.findChildViewById(rootView, id);
      if (equipmentNameText == null) {
        break missingId;
      }

      id = R.id.equipment_price_text;
      EditText equipmentPriceText = ViewBindings.findChildViewById(rootView, id);
      if (equipmentPriceText == null) {
        break missingId;
      }

      id = R.id.equipment_usage_text;
      EditText equipmentUsageText = ViewBindings.findChildViewById(rootView, id);
      if (equipmentUsageText == null) {
        break missingId;
      }

      return new UpdatePopupBinding((LinearLayout) rootView, editButton, equipmentDetailsText,
          equipmentLocationText, equipmentNameText, equipmentPriceText, equipmentUsageText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
